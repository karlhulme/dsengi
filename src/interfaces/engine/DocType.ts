import { DocTypePolicy } from "./DocTypePolicy.ts";

/**
 * Represents a type of document that the engine can retrieve, save and mutate.
 */
export interface DocType<DocTypeNames extends string, DocStoreParams> {
  /**
   * The name of the document type.
   */
  name: DocTypeNames;

  /**
   * The parameters for the document store for this document type.
   */
  docStoreParams: DocStoreParams;

  /**
   * A policy that governs how the document type can be accessed
   * and mutated.
   */
  policy?: DocTypePolicy;

  /**
   * Indicates if documents of this type should be saved into a
   * single central partition.
   */
  useSinglePartition?: boolean;

  /**
   * A function that generates a new id for documents of this type.
   * This function is called if an explicitId is not provided when
   * calling newDocument.
   */
  newId: () => string;

  /**
   * Indicates if patches for this document type should be stored.
   */
  storePatches: boolean;

  /**
   * Indicates if the change property should be populated in the
   * response object following mutation operations.
   */
  trackChanges: boolean;

  /**
   * The names of the document fields that should be included within
   * the change property that is returned from the mutation operations
   * archive, create, delete, redact and patch.
   * It can be useful to include parent ids and other related document
   * ids so that denormalised records can be built.
   */
  changeFieldNames: string[];

  /**
   * An array of fields that should be changed when the document is
   * redacted.  If the value to be applied is the '*' string
   * then the redactionValue will be applied instead.  This is typically
   * an identifier so that original values can be retrieved from a
   * separate governance/record system.
   */
  redactFields: { fieldName: string; value: unknown }[];

  /**
   * A validator function that returns a string describing the validation
   * failure, or uses a void return if the given document is valid.
   * This function may alter the document to make it valid, such as
   * removing unrecognised fields.  This function should focus on the
   * individual types and range of individual fields on the record and
   * is a good candidate for functions generated by code-generation libraries
   * such as Jsonotron.  This function will be invoked before and after
   * the validateDoc function.
   */
  // deno-lint-ignore no-explicit-any
  validateFields: (doc: any) => string | void;

  /**
   * A validator function that returns a string describing the validation
   * failure, or uses a void return if the given document is valid.
   * This function may alter the document to make it valid or better,
   * such as removing deprecated field values.  This function should
   * focus on validating the fields on the document with respect to each
   * other, ensuring that the complete document is consistent.
   */
  // deno-lint-ignore no-explicit-any
  validateDoc: (doc: any) => string | void;
}
