import { DocTypePolicy } from "./DocTypePolicy.ts";

/**
 * Represents a type of document that the engine can retrieve, save and mutate.
 */
export interface DocType {
  /**
   * The name of the document type.
   */
  name: string;

  /**
   * A validator function that returns a string describing the validation
   * failure, or uses a void return if the given document is valid.
   * This function may alter the document to make it valid, such as
   * removing unrecognised fields.  This function should focus on the
   * individual types and range of individual fields on the record and
   * is a good candidate for functions generated by code-generation libraries
   * such as Jsonotron.  This function will be invoked before and after
   * the validateDoc function.
   */
  // deno-lint-ignore no-explicit-any
  validateFields: (doc: any) => string | void;

  /**
   * A validator function that returns a string describing the validation
   * failure, or uses a void return if the given document is valid.
   * This function may alter the document to make it valid or better,
   * such as removing deprecated field values.  This function should
   * focus on validating the fields on the document with respect to each
   * other, ensuring that the complete document is consistent.
   */
  // deno-lint-ignore no-explicit-any
  validateDoc: (doc: any) => string | void;

  /**
   * An array of field names that cannot be patched.
   * System fields are always read-only and do not need to be specified.
   */
  readOnlyFieldNames: string[];

  /**
   * A policy that governs how the document type can be accessed
   * and mutated.
   */
  policy?: DocTypePolicy;
}
